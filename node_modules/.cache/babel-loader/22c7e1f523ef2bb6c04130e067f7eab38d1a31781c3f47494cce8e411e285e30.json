{"ast":null,"code":"import React,{useState,useEffect}from'react';import{createPost,getAllPosts,getPostById,removePost}from\"../../Common/Services/PostService\";import{Posts}from\"./Posts\";// future feature: genre filtering\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";const PostList=()=>{// Variables in the state to hold data\nconst[posts,setPosts]=useState([]);const[post,setPost]=useState([]);const[postTitle,setPostTitle]=useState();// UseEffect to run when the page loads to\n// obtain async data and render\nuseEffect(()=>{getAllPosts().then(posts=>{setPosts(posts);});},[]);// Flags in the state to watch for add/remove updates\nconst[add,setAdd]=useState(false);const[remove,setRemove]=useState(\"\");// UseEffect that runs when changes\n// are made to the state variables/flags\nuseEffect(()=>{// Check for add flag and make sure title + content state variables are defined\nif(postTitle&&add){createPost(postTitle).then(newPost=>{setAdd(false);// Add the newly created post to the posts array\n// to render the new list of posts (thru spread/concatination)\nsetPosts([...posts,newPost]);//Note: CANNOT MANIPULATE STATE ARRAY DIRECTLY\n//posts = posts.push(post)\n//setPosts(posts)\n});}// Check if remove state variable is holding an ID\nif(remove.length>0){//Filter the old posts list to take out selected post\nconst newPosts=posts.filter(post=>post.id!==remove);setPosts(newPosts);removePost(remove).then(()=>{console.log(\"Removed post with ID: \",remove);});// Reset remove state variable\nsetRemove(\"\");}},[postTitle,posts,add,remove]);return/*#__PURE__*/_jsx(\"div\",{class:\"container-xl\",children:posts.map(post=>/*#__PURE__*/_jsx(\"div\",{class:\"d-grid gap-2 mb-4\",children:/*#__PURE__*/_jsx(\"div\",{class:\"card\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"card-body\",children:[/*#__PURE__*/_jsxs(\"button\",{class:\"btn btn-dark\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":'#'+post.id,\"aria-expanded\":\"false\",\"aria-controls\":'#'+post.id,children:[post.get(\"Title\"),\" | Posted: \",post.get(\"createdAt\"),\" | Last Updated: \",post.get(\"updatedAt\")]}),/*#__PURE__*/_jsx(\"div\",{class:\"collapse\",id:'#'+post.id,children:post.get(\"Content\")})]})})}))});};export{PostList};","map":{"version":3,"names":["React","useState","useEffect","createPost","getAllPosts","getPostById","removePost","Posts","jsxs","_jsxs","jsx","_jsx","PostList","posts","setPosts","post","setPost","postTitle","setPostTitle","then","add","setAdd","remove","setRemove","newPost","length","newPosts","filter","id","console","log","class","children","map","type","get"],"sources":["C:/Users/adasa/Desktop/humanResources/MaidenlessWebsite/src/Components/PostView/PostRetriever.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  createPost,\r\n  getAllPosts,\r\n  getPostById,\r\n  removePost\r\n} from \"../../Common/Services/PostService\";\r\nimport { Posts } from \"./Posts\";\r\n  \r\n  // future feature: genre filtering\r\n\r\n  const PostList = () => {\r\n    // Variables in the state to hold data\r\n    const [posts, setPosts] = useState([]);\r\n    const [post, setPost] = useState([]);\r\n    const [postTitle, setPostTitle] = useState();\r\n  \r\n    // UseEffect to run when the page loads to\r\n    // obtain async data and render\r\n    useEffect(() => {\r\n      getAllPosts().then((posts) => {\r\n        setPosts(posts);\r\n      });\r\n    }, []);\r\n\r\n    // Flags in the state to watch for add/remove updates\r\n    const [add, setAdd] = useState(false);\r\n    const [remove, setRemove] = useState(\"\");\r\n\r\n  // UseEffect that runs when changes\r\n  // are made to the state variables/flags\r\n  useEffect(() => {\r\n    // Check for add flag and make sure title + content state variables are defined\r\n    if (postTitle && add) {\r\n      createPost(postTitle).then((newPost) => {\r\n        setAdd(false);\r\n        // Add the newly created post to the posts array\r\n        // to render the new list of posts (thru spread/concatination)\r\n        setPosts([...posts, newPost]);\r\n\r\n        //Note: CANNOT MANIPULATE STATE ARRAY DIRECTLY\r\n        //posts = posts.push(post)\r\n        //setPosts(posts)\r\n      });\r\n    }\r\n\r\n    // Check if remove state variable is holding an ID\r\n    if (remove.length > 0) {\r\n      //Filter the old posts list to take out selected post\r\n      const newPosts = posts.filter((post) => post.id !== remove);\r\n      setPosts(newPosts);\r\n\r\n      removePost(remove).then(() => {\r\n        console.log(\"Removed post with ID: \", remove);\r\n      });\r\n      // Reset remove state variable\r\n      setRemove(\"\");\r\n    }\r\n  }, [postTitle, posts, add, remove]);\r\n\r\n    return (\r\n      <div class=\"container-xl\">\r\n          {posts.map((post)=>(\r\n            <div class=\"d-grid gap-2 mb-4\">\r\n              {/* card to hold post */}\r\n              <div class=\"card\"><div class=\"card-body\">\r\n                {/* creates a button with basic post overview */}\r\n                <button class=\"btn btn-dark\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={'#'+(post.id)} aria-expanded=\"false\" aria-controls={'#'+(post.id)}>\r\n                  {post.get(\"Title\")} | Posted: {post.get(\"createdAt\")} | Last Updated: {post.get(\"updatedAt\")}\r\n                </button>\r\n                <div class=\"collapse\" id={'#'+(post.id)}>\r\n                  {post.get(\"Content\")}\r\n                </div>\r\n              </div></div>\r\n            </div>)\r\n          )}\r\n      </div>\r\n    );\r\n}\r\n\r\n  export { PostList };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}