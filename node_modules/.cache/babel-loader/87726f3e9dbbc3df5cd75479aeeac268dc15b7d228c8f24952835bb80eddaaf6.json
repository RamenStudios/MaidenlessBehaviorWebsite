{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adasa\\\\Desktop\\\\devblrProject\\\\webdev-project\\\\src\\\\Components\\\\BlogView\\\\NonDetailedPostRetriever.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllPosts, getById } from \"../../Common/Services/LearnService\";\nimport { getBlogById } from \"../../Common/Services/BlogService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsList = blog => {\n  _s();\n  // Variables in the state to hold data\n  const [posts, setPosts] = useState([]);\n  const [post, setPost] = useState([]);\n  const [postTitle, setPostTitle] = useState();\n\n  // UseEffect to run when the page loads to\n  // obtain async data and render\n  useEffect(() => {\n    getAllPosts().then(posts => {\n      setPosts(posts);\n    });\n  }, []);\n\n  // posts are funky but there is a reason\n  // by having dict rather than array, searching for a specific post # is much faster\n  posts.map(post => {\n    let blogTemp = getBlogById(post.get(\"blog\"));\n    let blogPosts = blogTemp.get(\"posts\");\n    blogPosts.append(post);\n    blog.set(\"posts\", blogPosts);\n  });\n  try {\n    var blogPostsIds = blog.get(\"posts\");\n    var blogPosts = [];\n    blogPostsIds.map(postId => {\n      blogPosts.append(getById(postId));\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"collapse\",\n      id: blog.id,\n      children: blogPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card card-body\",\n        children: [post.get(\"title\"), \" | \", post.get(\"user\").get(\"username\"), \" | \", post.get(\"updated_at\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  } catch (error) {\n    console.log(blog);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"couldnt get posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this);\n  }\n};\n_s(PostsList, \"IjieswrDHKYW2mtfnZqQmrTabNM=\");\n_c = PostsList;\nexport { PostsList };\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["React","useState","useEffect","getAllPosts","getById","getBlogById","jsxDEV","_jsxDEV","PostsList","blog","_s","posts","setPosts","post","setPost","postTitle","setPostTitle","then","map","blogTemp","get","blogPosts","append","set","blogPostsIds","postId","class","id","children","fileName","_jsxFileName","lineNumber","columnNumber","error","console","log","_c","$RefreshReg$"],"sources":["C:/Users/adasa/Desktop/devblrProject/webdev-project/src/Components/BlogView/NonDetailedPostRetriever.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {getAllPosts, getById} from \"../../Common/Services/LearnService\";\r\nimport {getBlogById} from \"../../Common/Services/BlogService\";\r\n  \r\n  const PostsList = (blog) => {\r\n      // Variables in the state to hold data\r\n      const [posts, setPosts] = useState([]);\r\n      const [post, setPost] = useState([]);\r\n      const [postTitle, setPostTitle] = useState();\r\n    \r\n      // UseEffect to run when the page loads to\r\n      // obtain async data and render\r\n      useEffect(() => {\r\n        getAllPosts().then((posts) => {\r\n          setPosts(posts);\r\n        });\r\n      }, []);\r\n\r\n    // posts are funky but there is a reason\r\n    // by having dict rather than array, searching for a specific post # is much faster\r\n    posts.map(\r\n      (post) =>\r\n      {\r\n        let blogTemp = getBlogById(post.get(\"blog\"));\r\n        let blogPosts = blogTemp.get(\"posts\");\r\n        blogPosts.append(post);\r\n        blog.set(\"posts\", blogPosts);\r\n      }\r\n    )\r\n    try{\r\n      var blogPostsIds = blog.get(\"posts\");\r\n      var blogPosts = [];\r\n      blogPostsIds.map((postId) => { blogPosts.append(getById(postId));});\r\n      return (\r\n        <div class=\"collapse\" id={blog.id}>\r\n          {blogPosts.map(\r\n            (post) =>\r\n            (\r\n                <div class=\"card card-body\">\r\n                  {post.get(\"title\")} | {post.get(\"user\").get(\"username\")} | {post.get(\"updated_at\")}\r\n                </div>\r\n            )\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    catch(error)\r\n    {\r\n      console.log(blog);\r\n      return (\r\n        <div>\r\n          couldnt get posts\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export {PostsList}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAAQC,WAAW,EAAEC,OAAO,QAAO,oCAAoC;AACvE,SAAQC,WAAW,QAAO,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,SAAS,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC;;EAE5C;EACA;EACAC,SAAS,CAAC,MAAM;IACdC,WAAW,CAAC,CAAC,CAACc,IAAI,CAAEN,KAAK,IAAK;MAC5BC,QAAQ,CAACD,KAAK,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAER;EACA;EACAA,KAAK,CAACO,GAAG,CACNL,IAAI,IACL;IACE,IAAIM,QAAQ,GAAGd,WAAW,CAACQ,IAAI,CAACO,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAIC,SAAS,GAAGF,QAAQ,CAACC,GAAG,CAAC,OAAO,CAAC;IACrCC,SAAS,CAACC,MAAM,CAACT,IAAI,CAAC;IACtBJ,IAAI,CAACc,GAAG,CAAC,OAAO,EAAEF,SAAS,CAAC;EAC9B,CACF,CAAC;EACD,IAAG;IACD,IAAIG,YAAY,GAAGf,IAAI,CAACW,GAAG,CAAC,OAAO,CAAC;IACpC,IAAIC,SAAS,GAAG,EAAE;IAClBG,YAAY,CAACN,GAAG,CAAEO,MAAM,IAAK;MAAEJ,SAAS,CAACC,MAAM,CAAClB,OAAO,CAACqB,MAAM,CAAC,CAAC;IAAC,CAAC,CAAC;IACnE,oBACElB,OAAA;MAAKmB,KAAK,EAAC,UAAU;MAACC,EAAE,EAAElB,IAAI,CAACkB,EAAG;MAAAC,QAAA,EAC/BP,SAAS,CAACH,GAAG,CACXL,IAAI,iBAEDN,OAAA;QAAKmB,KAAK,EAAC,gBAAgB;QAAAE,QAAA,GACxBf,IAAI,CAACO,GAAG,CAAC,OAAO,CAAC,EAAC,KAAG,EAACP,IAAI,CAACO,GAAG,CAAC,MAAM,CAAC,CAACA,GAAG,CAAC,UAAU,CAAC,EAAC,KAAG,EAACP,IAAI,CAACO,GAAG,CAAC,YAAY,CAAC;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAEX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC,CACD,OAAMC,KAAK,EACX;IACEC,OAAO,CAACC,GAAG,CAAC1B,IAAI,CAAC;IACjB,oBACEF,OAAA;MAAAqB,QAAA,EAAK;IAEL;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEV;AACF,CAAC;AAAAtB,EAAA,CAnDKF,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAqDf,SAAQA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}