{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Creates a new LiveQuery Subscription.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n */\nvar Subscription = /*#__PURE__*/function () {\n  /*\n   * @param {string} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  function Subscription(id, query, sessionToken) {\n    (0, _classCallCheck2.default)(this, Subscription);\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.unsubscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false;\n    var EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on;\n    this.emit = this.emitter.emit;\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', function () {});\n  }\n\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n  (0, _createClass2.default)(Subscription, [{\n    key: \"unsubscribe\",\n    value: function () /*: Promise*/{\n      var _this = this;\n      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {\n        _this.emit('close');\n        return liveQueryClient.unsubscribe(_this);\n      });\n    }\n  }]);\n  return Subscription;\n}();\nvar _default = Subscription;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_classCallCheck2","_createClass2","_CoreManager","_promiseUtils","Subscription","id","query","sessionToken","subscribePromise","resolvingPromise","unsubscribePromise","subscribed","EventEmitter","getEventEmitter","emitter","on","emit","key","_this","getLiveQueryController","getDefaultLiveQueryClient","then","liveQueryClient","unsubscribe","_default"],"sources":["/Users/scapodicci/Desktop/WebDev_HW/rodriguez_capodicci_feature_4_kickoff/node_modules/parse/lib/browser/LiveQuerySubscription.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Creates a new LiveQuery Subscription.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n */\nvar Subscription = /*#__PURE__*/function () {\n  /*\n   * @param {string} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  function Subscription(id, query, sessionToken) {\n    (0, _classCallCheck2.default)(this, Subscription);\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.unsubscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false;\n    var EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on;\n    this.emit = this.emitter.emit;\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', function () {});\n  }\n\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n  (0, _createClass2.default)(Subscription, [{\n    key: \"unsubscribe\",\n    value: function () /*: Promise*/{\n      var _this = this;\n      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {\n        _this.emit('close');\n        return liveQueryClient.unsubscribe(_this);\n      });\n    }\n  }]);\n  return Subscription;\n}();\nvar _default = Subscription;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}