{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adasa\\\\Desktop\\\\devblrProject\\\\webdev-project\\\\src\\\\Components\\\\BlogView\\\\NonDetailedPostRetriever.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getAllPosts, getById } from \"../../Common/Services/LearnService\";\nimport { getBlogById } from \"../../Common/Services/BlogService\";\n\n// extract the posts from the json\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function outputPosts(blog) {\n  var _s = $RefreshSig$();\n  const allPosts = () => {\n    _s();\n    // Variables in the state to hold data\n    const [posts, setPosts] = useState([]);\n    const [post, setPost] = useState([]);\n    const [postTitle, setPostTitle] = useState();\n\n    // UseEffect to run when the page loads to\n    // obtain async data and render\n    useEffect(() => {\n      getAllPosts().then(posts => {\n        setPosts(posts);\n      });\n    }, []);\n\n    // posts are funky but there is a reason\n    // by having dict rather than array, searching for a specific post # is much faster\n    allPosts.map(post => {\n      let blog = getBlogById(post.get(\"blog\"));\n      let blogPosts = blog.get(\"posts\");\n      blogPosts.append(post);\n      blog.set(\"posts\", blogPosts);\n    });\n    var blogPostsIds = blog.get(\"posts\");\n    var blogPosts = [];\n    blogPostsIds.map(postId => {\n      blogPosts.append(getById(postId));\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"collapse\",\n      id: blog.id,\n      children: blogPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card card-body\",\n        children: [post.get(\"title\"), \" | \", post.get(\"user\").get(\"username\"), \" | \", post.get(\"updated_at\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  };\n  _s(allPosts, \"IjieswrDHKYW2mtfnZqQmrTabNM=\");\n}","map":{"version":3,"names":["React","useState","useEffect","getAllPosts","getById","getBlogById","jsxDEV","_jsxDEV","outputPosts","blog","_s","$RefreshSig$","allPosts","posts","setPosts","post","setPost","postTitle","setPostTitle","then","map","get","blogPosts","append","set","blogPostsIds","postId","class","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/adasa/Desktop/devblrProject/webdev-project/src/Components/BlogView/NonDetailedPostRetriever.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {getAllPosts, getById} from \"../../Common/Services/LearnService\";\r\nimport {getBlogById} from \"../../Common/Services/BlogService\";\r\n  \r\n  // extract the posts from the json\r\n  export function outputPosts(blog) \r\n  {\r\n    const allPosts = () => {\r\n      // Variables in the state to hold data\r\n      const [posts, setPosts] = useState([]);\r\n      const [post, setPost] = useState([]);\r\n      const [postTitle, setPostTitle] = useState();\r\n    \r\n      // UseEffect to run when the page loads to\r\n      // obtain async data and render\r\n      useEffect(() => {\r\n        getAllPosts().then((posts) => {\r\n          setPosts(posts);\r\n        });\r\n      }, []);\r\n\r\n    // posts are funky but there is a reason\r\n    // by having dict rather than array, searching for a specific post # is much faster\r\n    allPosts.map(\r\n      (post) =>\r\n      {\r\n        let blog = getBlogById(post.get(\"blog\"));\r\n        let blogPosts = blog.get(\"posts\");\r\n        blogPosts.append(post);\r\n        blog.set(\"posts\", blogPosts);\r\n      }\r\n    )\r\n    var blogPostsIds = blog.get(\"posts\");\r\n    var blogPosts = [];\r\n    blogPostsIds.map((postId) => { blogPosts.append(getById(postId));});\r\n    return (\r\n      <div class=\"collapse\" id={blog.id}>\r\n        {blogPosts.map(\r\n          (post) =>\r\n          (\r\n              <div class=\"card card-body\">\r\n                {post.get(\"title\")} | {post.get(\"user\").get(\"username\")} | {post.get(\"updated_at\")}\r\n              </div>\r\n          )\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAAQC,WAAW,EAAEC,OAAO,QAAO,oCAAoC;AACvE,SAAQC,WAAW,QAAO,mCAAmC;;AAE3D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAChC;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IAAAF,EAAA;IACrB;IACA,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;IACtC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;IACpC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC;;IAE5C;IACA;IACAC,SAAS,CAAC,MAAM;MACdC,WAAW,CAAC,CAAC,CAACgB,IAAI,CAAEN,KAAK,IAAK;QAC5BC,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;;IAER;IACA;IACAD,QAAQ,CAACQ,GAAG,CACTL,IAAI,IACL;MACE,IAAIN,IAAI,GAAGJ,WAAW,CAACU,IAAI,CAACM,GAAG,CAAC,MAAM,CAAC,CAAC;MACxC,IAAIC,SAAS,GAAGb,IAAI,CAACY,GAAG,CAAC,OAAO,CAAC;MACjCC,SAAS,CAACC,MAAM,CAACR,IAAI,CAAC;MACtBN,IAAI,CAACe,GAAG,CAAC,OAAO,EAAEF,SAAS,CAAC;IAC9B,CACF,CAAC;IACD,IAAIG,YAAY,GAAGhB,IAAI,CAACY,GAAG,CAAC,OAAO,CAAC;IACpC,IAAIC,SAAS,GAAG,EAAE;IAClBG,YAAY,CAACL,GAAG,CAAEM,MAAM,IAAK;MAAEJ,SAAS,CAACC,MAAM,CAACnB,OAAO,CAACsB,MAAM,CAAC,CAAC;IAAC,CAAC,CAAC;IACnE,oBACEnB,OAAA;MAAKoB,KAAK,EAAC,UAAU;MAACC,EAAE,EAAEnB,IAAI,CAACmB,EAAG;MAAAC,QAAA,EAC/BP,SAAS,CAACF,GAAG,CACXL,IAAI,iBAEDR,OAAA;QAAKoB,KAAK,EAAC,gBAAgB;QAAAE,QAAA,GACxBd,IAAI,CAACM,GAAG,CAAC,OAAO,CAAC,EAAC,KAAG,EAACN,IAAI,CAACM,GAAG,CAAC,MAAM,CAAC,CAACA,GAAG,CAAC,UAAU,CAAC,EAAC,KAAG,EAACN,IAAI,CAACM,GAAG,CAAC,YAAY,CAAC;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAEX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;EAAAvB,EAAA,CAxCOE,QAAQ;AAyClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}