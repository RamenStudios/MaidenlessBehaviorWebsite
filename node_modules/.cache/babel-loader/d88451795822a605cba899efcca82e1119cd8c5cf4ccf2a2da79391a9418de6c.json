{"ast":null,"code":"\"use strict\";\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/map\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/values\"));\nvar _setTimeout2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set-timeout\"));\nvar _bind = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/bind\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _LiveQuerySubscription = _interopRequireDefault(require(\"./LiveQuerySubscription\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context6;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n} /* global WebSocket */\n// The LiveQuery client inner state\nvar CLIENT_STATE = {\n  INITIALIZED: 'initialized',\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected',\n  CLOSED: 'closed',\n  RECONNECTING: 'reconnecting',\n  DISCONNECTED: 'disconnected'\n};\n\n// The event type the LiveQuery client should sent to server\nvar OP_TYPES = {\n  CONNECT: 'connect',\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  ERROR: 'error'\n};\n\n// The event we get back from LiveQuery server\nvar OP_EVENTS = {\n  CONNECTED: 'connected',\n  SUBSCRIBED: 'subscribed',\n  UNSUBSCRIBED: 'unsubscribed',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\n\n// The event the LiveQuery client should emit\nvar CLIENT_EMMITER_TYPES = {\n  CLOSE: 'close',\n  ERROR: 'error',\n  OPEN: 'open'\n};\n\n// The event the LiveQuery subscription should emit\nvar SUBSCRIPTION_EMMITER_TYPES = {\n  OPEN: 'open',\n  CLOSE: 'close',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\nvar generateInterval = function (k) {\n  return Math.random() * Math.min(30, Math.pow(2, k) - 1) * 1000;\n};\n\n/**\n * Creates a new LiveQueryClient.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * A wrapper of a standard WebSocket client. We add several useful methods to\n * help you connect/disconnect to LiveQueryServer, subscribe/unsubscribe a ParseQuery easily.\n *\n * javascriptKey and masterKey are used for verifying the LiveQueryClient when it tries\n * to connect to the LiveQuery server\n *\n * We expose three events to help you monitor the status of the LiveQueryClient.\n *\n * <pre>\n * let Parse = require('parse/node');\n * let LiveQueryClient = Parse.LiveQueryClient;\n * let client = new LiveQueryClient({\n *   applicationId: '',\n *   serverURL: '',\n *   javascriptKey: '',\n *   masterKey: ''\n *  });\n * </pre>\n *\n * Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('open', () => {\n *\n * });</pre>\n *\n * Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('close', () => {\n *\n * });</pre>\n *\n * Error - When some network error or LiveQuery server error happens, you'll get this event.\n * <pre>\n * client.on('error', (error) => {\n *\n * });</pre>\n *\n * @alias Parse.LiveQueryClient\n */\nvar LiveQueryClient = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {string} options.applicationId - applicationId of your Parse app\n   * @param {string} options.serverURL - <b>the URL of your LiveQuery server</b>\n   * @param {string} options.javascriptKey (optional)\n   * @param {string} options.masterKey (optional) Your Parse Master Key. (Node.js only!)\n   * @param {string} options.sessionToken (optional)\n   * @param {string} options.installationId (optional)\n   */\n  function LiveQueryClient(_ref) {\n    var applicationId = _ref.applicationId,\n      serverURL = _ref.serverURL,\n      javascriptKey = _ref.javascriptKey,\n      masterKey = _ref.masterKey,\n      sessionToken = _ref.sessionToken,\n      installationId = _ref.installationId;\n    (0, _classCallCheck2.default)(this, LiveQueryClient);\n    (0, _defineProperty2.default)(this, \"attempts\", void 0);\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"requestId\", void 0);\n    (0, _defineProperty2.default)(this, \"applicationId\", void 0);\n    (0, _defineProperty2.default)(this, \"serverURL\", void 0);\n    (0, _defineProperty2.default)(this, \"javascriptKey\", void 0);\n    (0, _defineProperty2.default)(this, \"masterKey\", void 0);\n    (0, _defineProperty2.default)(this, \"sessionToken\", void 0);\n    (0, _defineProperty2.default)(this, \"installationId\", void 0);\n    (0, _defineProperty2.default)(this, \"additionalProperties\", void 0);\n    (0, _defineProperty2.default)(this, \"connectPromise\", void 0);\n    (0, _defineProperty2.default)(this, \"subscriptions\", void 0);\n    (0, _defineProperty2.default)(this, \"socket\", void 0);\n    (0, _defineProperty2.default)(this, \"state\", void 0);\n    if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n    this.reconnectHandle = null;\n    this.attempts = 1;\n    this.id = 0;\n    this.requestId = 1;\n    this.serverURL = serverURL;\n    this.applicationId = applicationId;\n    this.javascriptKey = javascriptKey || undefined;\n    this.masterKey = masterKey || undefined;\n    this.sessionToken = sessionToken || undefined;\n    this.installationId = installationId || undefined;\n    this.additionalProperties = true;\n    this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscriptions = new _map.default();\n    this.state = CLIENT_STATE.INITIALIZED;\n    var EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on;\n    this.emit = this.emitter.emit;\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', function () {});\n  }\n  (0, _createClass2.default)(LiveQueryClient, [{\n    key: \"shouldOpen\",\n    value: function () /*: any*/{\n      return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;\n    }\n\n    /**\n     * Subscribes to a ParseQuery\n     *\n     * If you provide the sessionToken, when the LiveQuery server gets ParseObject's\n     * updates from parse server, it'll try to check whether the sessionToken fulfills\n     * the ParseObject's ACL. The LiveQuery server will only send updates to clients whose\n     * sessionToken is fit for the ParseObject's ACL. You can check the LiveQuery protocol\n     * <a href=\"https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification\">here</a> for more details. The subscription you get is the same subscription you get\n     * from our Standard API.\n     *\n     * @param {object} query - the ParseQuery you want to subscribe to\n     * @param {string} sessionToken (optional)\n     * @returns {LiveQuerySubscription | undefined}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function (query /*: Object*/, sessionToken /*: ?string*/) /*: LiveQuerySubscription*/{\n      var _queryJSON$keys,\n        _queryJSON$watch,\n        _this = this;\n      if (!query) {\n        return;\n      }\n      var className = query.className;\n      var queryJSON = query.toJSON();\n      var where = queryJSON.where;\n      var fields = (_queryJSON$keys = (0, _keys.default)(queryJSON)) === null || _queryJSON$keys === void 0 ? void 0 : _queryJSON$keys.split(',');\n      var watch = (_queryJSON$watch = queryJSON.watch) === null || _queryJSON$watch === void 0 ? void 0 : _queryJSON$watch.split(',');\n      var subscribeRequest = {\n        op: OP_TYPES.SUBSCRIBE,\n        requestId: this.requestId,\n        query: {\n          className: className,\n          where: where,\n          fields: fields,\n          watch: watch\n        }\n      };\n      if (sessionToken) {\n        subscribeRequest.sessionToken = sessionToken;\n      }\n      var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);\n      this.subscriptions.set(this.requestId, subscription);\n      this.requestId += 1;\n      this.connectPromise.then(function () {\n        _this.socket.send((0, _stringify.default)(subscribeRequest));\n      }).catch(function (error) {\n        subscription.subscribePromise.reject(error);\n      });\n      return subscription;\n    }\n\n    /**\n     * After calling unsubscribe you'll stop receiving events from the subscription object.\n     *\n     * @param {object} subscription - subscription you would like to unsubscribe from.\n     * @returns {Promise | undefined}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function (subscription /*: Object*/) /*: ?Promise*/{\n      var _this2 = this;\n      if (!subscription) {\n        return;\n      }\n      var unsubscribeRequest = {\n        op: OP_TYPES.UNSUBSCRIBE,\n        requestId: subscription.id\n      };\n      return this.connectPromise.then(function () {\n        return _this2.socket.send((0, _stringify.default)(unsubscribeRequest));\n      }).then(function () {\n        return subscription.unsubscribePromise;\n      });\n    }\n\n    /**\n     * After open is called, the LiveQueryClient will try to send a connect request\n     * to the LiveQuery server.\n     *\n     */\n  }, {\n    key: \"open\",\n    value: function () {\n      var _this3 = this;\n      var WebSocketImplementation = _CoreManager.default.getWebSocketController();\n      if (!WebSocketImplementation) {\n        this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n        return;\n      }\n      if (this.state !== CLIENT_STATE.RECONNECTING) {\n        this.state = CLIENT_STATE.CONNECTING;\n      }\n      this.socket = new WebSocketImplementation(this.serverURL);\n      this.socket.closingPromise = (0, _promiseUtils.resolvingPromise)();\n\n      // Bind WebSocket callbacks\n      this.socket.onopen = function () {\n        _this3._handleWebSocketOpen();\n      };\n      this.socket.onmessage = function (event) {\n        _this3._handleWebSocketMessage(event);\n      };\n      this.socket.onclose = function (event) {\n        _this3.socket.closingPromise.resolve(event);\n        _this3._handleWebSocketClose();\n      };\n      this.socket.onerror = function (error) {\n        _this3._handleWebSocketError(error);\n      };\n    }\n  }, {\n    key: \"resubscribe\",\n    value: function () {\n      var _context,\n        _this4 = this;\n      (0, _forEach.default)(_context = this.subscriptions).call(_context, function (subscription, requestId) {\n        var query = subscription.query;\n        var queryJSON = query.toJSON();\n        var where = queryJSON.where;\n        var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n        var className = query.className;\n        var sessionToken = subscription.sessionToken;\n        var subscribeRequest = {\n          op: OP_TYPES.SUBSCRIBE,\n          requestId: requestId,\n          query: {\n            className: className,\n            where: where,\n            fields: fields\n          }\n        };\n        if (sessionToken) {\n          subscribeRequest.sessionToken = sessionToken;\n        }\n        _this4.connectPromise.then(function () {\n          _this4.socket.send((0, _stringify.default)(subscribeRequest));\n        });\n      });\n    }\n\n    /**\n     * This method will close the WebSocket connection to this LiveQueryClient,\n     * cancel the auto reconnect and unsubscribe all subscriptions based on it.\n     *\n     * @returns {Promise | undefined} CloseEvent {@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event}\n     */\n  }, {\n    key: \"close\",\n    value: function () /*: ?Promise*/{\n      var _this$socket, _this$socket2, _context2;\n      if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.DISCONNECTED;\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.close();\n      // Notify each subscription about the close\n      var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subscription = _step.value;\n          subscription.subscribed = false;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this._handleReset();\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n      return (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.closingPromise;\n    }\n\n    // ensure we start with valid state if connect is called again after close\n  }, {\n    key: \"_handleReset\",\n    value: function () {\n      this.attempts = 1;\n      this.id = 0;\n      this.requestId = 1;\n      this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n      this.subscriptions = new _map.default();\n    }\n  }, {\n    key: \"_handleWebSocketOpen\",\n    value: function () {\n      this.attempts = 1;\n      var connectRequest = {\n        op: OP_TYPES.CONNECT,\n        applicationId: this.applicationId,\n        javascriptKey: this.javascriptKey,\n        masterKey: this.masterKey,\n        sessionToken: this.sessionToken\n      };\n      if (this.additionalProperties) {\n        connectRequest.installationId = this.installationId;\n      }\n      this.socket.send((0, _stringify.default)(connectRequest));\n    }\n  }, {\n    key: \"_handleWebSocketMessage\",\n    value: function (event /*: any*/) {\n      var data = event.data;\n      if (typeof data === 'string') {\n        data = JSON.parse(data);\n      }\n      var subscription = null;\n      if (data.requestId) {\n        subscription = this.subscriptions.get(data.requestId);\n      }\n      var response = {\n        clientId: data.clientId,\n        installationId: data.installationId\n      };\n      switch (data.op) {\n        case OP_EVENTS.CONNECTED:\n          if (this.state === CLIENT_STATE.RECONNECTING) {\n            this.resubscribe();\n          }\n          this.emit(CLIENT_EMMITER_TYPES.OPEN);\n          this.id = data.clientId;\n          this.connectPromise.resolve();\n          this.state = CLIENT_STATE.CONNECTED;\n          break;\n        case OP_EVENTS.SUBSCRIBED:\n          if (subscription) {\n            subscription.subscribed = true;\n            subscription.subscribePromise.resolve();\n            (0, _setTimeout2.default)(function () {\n              return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);\n            }, 200);\n          }\n          break;\n        case OP_EVENTS.ERROR:\n          {\n            var parseError = new _ParseError.default(data.code, data.error);\n            if (!this.id) {\n              this.connectPromise.reject(parseError);\n              this.state = CLIENT_STATE.DISCONNECTED;\n            }\n            if (data.requestId) {\n              if (subscription) {\n                subscription.subscribePromise.reject(parseError);\n                (0, _setTimeout2.default)(function () {\n                  return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);\n                }, 200);\n              }\n            } else {\n              this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);\n            }\n            if (data.error === 'Additional properties not allowed') {\n              this.additionalProperties = false;\n            }\n            if (data.reconnect) {\n              this._handleReconnect();\n            }\n            break;\n          }\n        case OP_EVENTS.UNSUBSCRIBED:\n          {\n            if (subscription) {\n              this.subscriptions.delete(data.requestId);\n              subscription.subscribed = false;\n              subscription.unsubscribePromise.resolve();\n            }\n            break;\n          }\n        default:\n          {\n            // create, update, enter, leave, delete cases\n            if (!subscription) {\n              break;\n            }\n            var override = false;\n            if (data.original) {\n              override = true;\n              delete data.original.__type;\n              // Check for removed fields\n              for (var field in data.original) {\n                if (!(field in data.object)) {\n                  data.object[field] = undefined;\n                }\n              }\n              data.original = _ParseObject.default.fromJSON(data.original, false);\n            }\n            delete data.object.__type;\n            var parseObject = _ParseObject.default.fromJSON(data.object, !(subscription.query && subscription.query._select) ? override : false);\n            if (data.original) {\n              subscription.emit(data.op, parseObject, data.original, response);\n            } else {\n              subscription.emit(data.op, parseObject, response);\n            }\n            var localDatastore = _CoreManager.default.getLocalDatastore();\n            if (override && localDatastore.isEnabled) {\n              localDatastore._updateObjectIfPinned(parseObject).then(function () {});\n            }\n          }\n      }\n    }\n  }, {\n    key: \"_handleWebSocketClose\",\n    value: function () {\n      var _context3;\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.CLOSED;\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n      // Notify each subscription about the close\n      var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var subscription = _step2.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleWebSocketError\",\n    value: function (error /*: any*/) {\n      var _context4;\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n      var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var subscription = _step3.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleReconnect\",\n    value: function () {\n      var _context5,\n        _this5 = this;\n      // if closed or currently reconnecting we stop attempting to reconnect\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.RECONNECTING;\n      var time = generateInterval(this.attempts);\n\n      // handle case when both close/error occur at frequent rates we ensure we do not reconnect unnecessarily.\n      // we're unable to distinguish different between close/error when we're unable to reconnect therefore\n      // we try to reconnect in both cases\n      // server side ws and browser WebSocket behave differently in when close/error get triggered\n\n      if (this.reconnectHandle) {\n        clearTimeout(this.reconnectHandle);\n      }\n      this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function () {\n        _this5.attempts++;\n        _this5.connectPromise = (0, _promiseUtils.resolvingPromise)();\n        _this5.open();\n      }).call(_context5, this), time);\n    }\n  }]);\n  return LiveQueryClient;\n}();\n_CoreManager.default.setWebSocketController(typeof WebSocket === 'function' || (typeof WebSocket === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(WebSocket)) === 'object' ? WebSocket : null);\nvar _default = LiveQueryClient;\nexports.default = _default;","map":{"version":3,"names":["_sliceInstanceProperty","require","_Array$from","_Symbol","_getIteratorMethod","_Array$isArray","_Object$defineProperty","_interopRequireDefault","exports","value","default","_indexOf","_map","_keys","_stringify","_forEach","_values","_setTimeout2","_bind","_typeof2","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_ParseObject","_LiveQuerySubscription","_promiseUtils","_ParseError","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_context6","_arrayLikeToArray","Object","prototype","toString","constructor","name","test","arr","len","arr2","Array","CLIENT_STATE","INITIALIZED","CONNECTING","CONNECTED","CLOSED","RECONNECTING","DISCONNECTED","OP_TYPES","CONNECT","SUBSCRIBE","UNSUBSCRIBE","ERROR","OP_EVENTS","SUBSCRIBED","UNSUBSCRIBED","CREATE","UPDATE","ENTER","LEAVE","DELETE","CLIENT_EMMITER_TYPES","CLOSE","OPEN","SUBSCRIPTION_EMMITER_TYPES","generateInterval","k","Math","random","min","pow","LiveQueryClient","_ref","applicationId","serverURL","javascriptKey","masterKey","sessionToken","installationId","Error","reconnectHandle","attempts","id","requestId","undefined","additionalProperties","connectPromise","resolvingPromise","subscriptions","state","EventEmitter","getEventEmitter","emitter","on","emit","key","query","_queryJSON$keys","_queryJSON$watch","_this","className","queryJSON","toJSON","where","fields","split","watch","subscribeRequest","op","subscription","set","then","socket","send","catch","error","subscribePromise","reject","_this2","unsubscribeRequest","unsubscribePromise","_this3","WebSocketImplementation","getWebSocketController","closingPromise","onopen","_handleWebSocketOpen","onmessage","event","_handleWebSocketMessage","onclose","resolve","_handleWebSocketClose","onerror","_handleWebSocketError","_context","_this4","_this$socket","_this$socket2","_context2","close","_iterator","_step","subscribed","_handleReset","connectRequest","data","JSON","parse","get","response","clientId","resubscribe","parseError","code","reconnect","_handleReconnect","delete","override","original","__type","field","object","fromJSON","parseObject","_select","localDatastore","getLocalDatastore","isEnabled","_updateObjectIfPinned","_context3","_iterator2","_step2","_context4","_iterator3","_step3","_context5","_this5","time","clearTimeout","open","setWebSocketController","WebSocket","_default"],"sources":["C:/Users/adasa/Desktop/humanResources/MaidenlessWebsite/MaidenlessBehaviorWebsite/node_modules/parse/lib/browser/LiveQueryClient.js"],"sourcesContent":["\"use strict\";\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Array$isArray = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/map\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/values\"));\nvar _setTimeout2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set-timeout\"));\nvar _bind = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/bind\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _LiveQuerySubscription = _interopRequireDefault(require(\"./LiveQuerySubscription\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context6;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n} /* global WebSocket */\n// The LiveQuery client inner state\nvar CLIENT_STATE = {\n  INITIALIZED: 'initialized',\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected',\n  CLOSED: 'closed',\n  RECONNECTING: 'reconnecting',\n  DISCONNECTED: 'disconnected'\n};\n\n// The event type the LiveQuery client should sent to server\nvar OP_TYPES = {\n  CONNECT: 'connect',\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  ERROR: 'error'\n};\n\n// The event we get back from LiveQuery server\nvar OP_EVENTS = {\n  CONNECTED: 'connected',\n  SUBSCRIBED: 'subscribed',\n  UNSUBSCRIBED: 'unsubscribed',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\n\n// The event the LiveQuery client should emit\nvar CLIENT_EMMITER_TYPES = {\n  CLOSE: 'close',\n  ERROR: 'error',\n  OPEN: 'open'\n};\n\n// The event the LiveQuery subscription should emit\nvar SUBSCRIPTION_EMMITER_TYPES = {\n  OPEN: 'open',\n  CLOSE: 'close',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\nvar generateInterval = function (k) {\n  return Math.random() * Math.min(30, Math.pow(2, k) - 1) * 1000;\n};\n\n/**\n * Creates a new LiveQueryClient.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * A wrapper of a standard WebSocket client. We add several useful methods to\n * help you connect/disconnect to LiveQueryServer, subscribe/unsubscribe a ParseQuery easily.\n *\n * javascriptKey and masterKey are used for verifying the LiveQueryClient when it tries\n * to connect to the LiveQuery server\n *\n * We expose three events to help you monitor the status of the LiveQueryClient.\n *\n * <pre>\n * let Parse = require('parse/node');\n * let LiveQueryClient = Parse.LiveQueryClient;\n * let client = new LiveQueryClient({\n *   applicationId: '',\n *   serverURL: '',\n *   javascriptKey: '',\n *   masterKey: ''\n *  });\n * </pre>\n *\n * Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('open', () => {\n *\n * });</pre>\n *\n * Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('close', () => {\n *\n * });</pre>\n *\n * Error - When some network error or LiveQuery server error happens, you'll get this event.\n * <pre>\n * client.on('error', (error) => {\n *\n * });</pre>\n *\n * @alias Parse.LiveQueryClient\n */\nvar LiveQueryClient = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {string} options.applicationId - applicationId of your Parse app\n   * @param {string} options.serverURL - <b>the URL of your LiveQuery server</b>\n   * @param {string} options.javascriptKey (optional)\n   * @param {string} options.masterKey (optional) Your Parse Master Key. (Node.js only!)\n   * @param {string} options.sessionToken (optional)\n   * @param {string} options.installationId (optional)\n   */\n  function LiveQueryClient(_ref) {\n    var applicationId = _ref.applicationId,\n      serverURL = _ref.serverURL,\n      javascriptKey = _ref.javascriptKey,\n      masterKey = _ref.masterKey,\n      sessionToken = _ref.sessionToken,\n      installationId = _ref.installationId;\n    (0, _classCallCheck2.default)(this, LiveQueryClient);\n    (0, _defineProperty2.default)(this, \"attempts\", void 0);\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"requestId\", void 0);\n    (0, _defineProperty2.default)(this, \"applicationId\", void 0);\n    (0, _defineProperty2.default)(this, \"serverURL\", void 0);\n    (0, _defineProperty2.default)(this, \"javascriptKey\", void 0);\n    (0, _defineProperty2.default)(this, \"masterKey\", void 0);\n    (0, _defineProperty2.default)(this, \"sessionToken\", void 0);\n    (0, _defineProperty2.default)(this, \"installationId\", void 0);\n    (0, _defineProperty2.default)(this, \"additionalProperties\", void 0);\n    (0, _defineProperty2.default)(this, \"connectPromise\", void 0);\n    (0, _defineProperty2.default)(this, \"subscriptions\", void 0);\n    (0, _defineProperty2.default)(this, \"socket\", void 0);\n    (0, _defineProperty2.default)(this, \"state\", void 0);\n    if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n    this.reconnectHandle = null;\n    this.attempts = 1;\n    this.id = 0;\n    this.requestId = 1;\n    this.serverURL = serverURL;\n    this.applicationId = applicationId;\n    this.javascriptKey = javascriptKey || undefined;\n    this.masterKey = masterKey || undefined;\n    this.sessionToken = sessionToken || undefined;\n    this.installationId = installationId || undefined;\n    this.additionalProperties = true;\n    this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscriptions = new _map.default();\n    this.state = CLIENT_STATE.INITIALIZED;\n    var EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on;\n    this.emit = this.emitter.emit;\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', function () {});\n  }\n  (0, _createClass2.default)(LiveQueryClient, [{\n    key: \"shouldOpen\",\n    value: function () /*: any*/{\n      return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;\n    }\n\n    /**\n     * Subscribes to a ParseQuery\n     *\n     * If you provide the sessionToken, when the LiveQuery server gets ParseObject's\n     * updates from parse server, it'll try to check whether the sessionToken fulfills\n     * the ParseObject's ACL. The LiveQuery server will only send updates to clients whose\n     * sessionToken is fit for the ParseObject's ACL. You can check the LiveQuery protocol\n     * <a href=\"https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification\">here</a> for more details. The subscription you get is the same subscription you get\n     * from our Standard API.\n     *\n     * @param {object} query - the ParseQuery you want to subscribe to\n     * @param {string} sessionToken (optional)\n     * @returns {LiveQuerySubscription | undefined}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function (query /*: Object*/, sessionToken /*: ?string*/) /*: LiveQuerySubscription*/{\n      var _queryJSON$keys,\n        _queryJSON$watch,\n        _this = this;\n      if (!query) {\n        return;\n      }\n      var className = query.className;\n      var queryJSON = query.toJSON();\n      var where = queryJSON.where;\n      var fields = (_queryJSON$keys = (0, _keys.default)(queryJSON)) === null || _queryJSON$keys === void 0 ? void 0 : _queryJSON$keys.split(',');\n      var watch = (_queryJSON$watch = queryJSON.watch) === null || _queryJSON$watch === void 0 ? void 0 : _queryJSON$watch.split(',');\n      var subscribeRequest = {\n        op: OP_TYPES.SUBSCRIBE,\n        requestId: this.requestId,\n        query: {\n          className: className,\n          where: where,\n          fields: fields,\n          watch: watch\n        }\n      };\n      if (sessionToken) {\n        subscribeRequest.sessionToken = sessionToken;\n      }\n      var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);\n      this.subscriptions.set(this.requestId, subscription);\n      this.requestId += 1;\n      this.connectPromise.then(function () {\n        _this.socket.send((0, _stringify.default)(subscribeRequest));\n      }).catch(function (error) {\n        subscription.subscribePromise.reject(error);\n      });\n      return subscription;\n    }\n\n    /**\n     * After calling unsubscribe you'll stop receiving events from the subscription object.\n     *\n     * @param {object} subscription - subscription you would like to unsubscribe from.\n     * @returns {Promise | undefined}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function (subscription /*: Object*/) /*: ?Promise*/{\n      var _this2 = this;\n      if (!subscription) {\n        return;\n      }\n      var unsubscribeRequest = {\n        op: OP_TYPES.UNSUBSCRIBE,\n        requestId: subscription.id\n      };\n      return this.connectPromise.then(function () {\n        return _this2.socket.send((0, _stringify.default)(unsubscribeRequest));\n      }).then(function () {\n        return subscription.unsubscribePromise;\n      });\n    }\n\n    /**\n     * After open is called, the LiveQueryClient will try to send a connect request\n     * to the LiveQuery server.\n     *\n     */\n  }, {\n    key: \"open\",\n    value: function () {\n      var _this3 = this;\n      var WebSocketImplementation = _CoreManager.default.getWebSocketController();\n      if (!WebSocketImplementation) {\n        this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n        return;\n      }\n      if (this.state !== CLIENT_STATE.RECONNECTING) {\n        this.state = CLIENT_STATE.CONNECTING;\n      }\n      this.socket = new WebSocketImplementation(this.serverURL);\n      this.socket.closingPromise = (0, _promiseUtils.resolvingPromise)();\n\n      // Bind WebSocket callbacks\n      this.socket.onopen = function () {\n        _this3._handleWebSocketOpen();\n      };\n      this.socket.onmessage = function (event) {\n        _this3._handleWebSocketMessage(event);\n      };\n      this.socket.onclose = function (event) {\n        _this3.socket.closingPromise.resolve(event);\n        _this3._handleWebSocketClose();\n      };\n      this.socket.onerror = function (error) {\n        _this3._handleWebSocketError(error);\n      };\n    }\n  }, {\n    key: \"resubscribe\",\n    value: function () {\n      var _context,\n        _this4 = this;\n      (0, _forEach.default)(_context = this.subscriptions).call(_context, function (subscription, requestId) {\n        var query = subscription.query;\n        var queryJSON = query.toJSON();\n        var where = queryJSON.where;\n        var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n        var className = query.className;\n        var sessionToken = subscription.sessionToken;\n        var subscribeRequest = {\n          op: OP_TYPES.SUBSCRIBE,\n          requestId: requestId,\n          query: {\n            className: className,\n            where: where,\n            fields: fields\n          }\n        };\n        if (sessionToken) {\n          subscribeRequest.sessionToken = sessionToken;\n        }\n        _this4.connectPromise.then(function () {\n          _this4.socket.send((0, _stringify.default)(subscribeRequest));\n        });\n      });\n    }\n\n    /**\n     * This method will close the WebSocket connection to this LiveQueryClient,\n     * cancel the auto reconnect and unsubscribe all subscriptions based on it.\n     *\n     * @returns {Promise | undefined} CloseEvent {@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event}\n     */\n  }, {\n    key: \"close\",\n    value: function () /*: ?Promise*/{\n      var _this$socket, _this$socket2, _context2;\n      if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.DISCONNECTED;\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.close();\n      // Notify each subscription about the close\n      var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subscription = _step.value;\n          subscription.subscribed = false;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this._handleReset();\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n      return (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.closingPromise;\n    }\n\n    // ensure we start with valid state if connect is called again after close\n  }, {\n    key: \"_handleReset\",\n    value: function () {\n      this.attempts = 1;\n      this.id = 0;\n      this.requestId = 1;\n      this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n      this.subscriptions = new _map.default();\n    }\n  }, {\n    key: \"_handleWebSocketOpen\",\n    value: function () {\n      this.attempts = 1;\n      var connectRequest = {\n        op: OP_TYPES.CONNECT,\n        applicationId: this.applicationId,\n        javascriptKey: this.javascriptKey,\n        masterKey: this.masterKey,\n        sessionToken: this.sessionToken\n      };\n      if (this.additionalProperties) {\n        connectRequest.installationId = this.installationId;\n      }\n      this.socket.send((0, _stringify.default)(connectRequest));\n    }\n  }, {\n    key: \"_handleWebSocketMessage\",\n    value: function (event /*: any*/) {\n      var data = event.data;\n      if (typeof data === 'string') {\n        data = JSON.parse(data);\n      }\n      var subscription = null;\n      if (data.requestId) {\n        subscription = this.subscriptions.get(data.requestId);\n      }\n      var response = {\n        clientId: data.clientId,\n        installationId: data.installationId\n      };\n      switch (data.op) {\n        case OP_EVENTS.CONNECTED:\n          if (this.state === CLIENT_STATE.RECONNECTING) {\n            this.resubscribe();\n          }\n          this.emit(CLIENT_EMMITER_TYPES.OPEN);\n          this.id = data.clientId;\n          this.connectPromise.resolve();\n          this.state = CLIENT_STATE.CONNECTED;\n          break;\n        case OP_EVENTS.SUBSCRIBED:\n          if (subscription) {\n            subscription.subscribed = true;\n            subscription.subscribePromise.resolve();\n            (0, _setTimeout2.default)(function () {\n              return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);\n            }, 200);\n          }\n          break;\n        case OP_EVENTS.ERROR:\n          {\n            var parseError = new _ParseError.default(data.code, data.error);\n            if (!this.id) {\n              this.connectPromise.reject(parseError);\n              this.state = CLIENT_STATE.DISCONNECTED;\n            }\n            if (data.requestId) {\n              if (subscription) {\n                subscription.subscribePromise.reject(parseError);\n                (0, _setTimeout2.default)(function () {\n                  return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);\n                }, 200);\n              }\n            } else {\n              this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);\n            }\n            if (data.error === 'Additional properties not allowed') {\n              this.additionalProperties = false;\n            }\n            if (data.reconnect) {\n              this._handleReconnect();\n            }\n            break;\n          }\n        case OP_EVENTS.UNSUBSCRIBED:\n          {\n            if (subscription) {\n              this.subscriptions.delete(data.requestId);\n              subscription.subscribed = false;\n              subscription.unsubscribePromise.resolve();\n            }\n            break;\n          }\n        default:\n          {\n            // create, update, enter, leave, delete cases\n            if (!subscription) {\n              break;\n            }\n            var override = false;\n            if (data.original) {\n              override = true;\n              delete data.original.__type;\n              // Check for removed fields\n              for (var field in data.original) {\n                if (!(field in data.object)) {\n                  data.object[field] = undefined;\n                }\n              }\n              data.original = _ParseObject.default.fromJSON(data.original, false);\n            }\n            delete data.object.__type;\n            var parseObject = _ParseObject.default.fromJSON(data.object, !(subscription.query && subscription.query._select) ? override : false);\n            if (data.original) {\n              subscription.emit(data.op, parseObject, data.original, response);\n            } else {\n              subscription.emit(data.op, parseObject, response);\n            }\n            var localDatastore = _CoreManager.default.getLocalDatastore();\n            if (override && localDatastore.isEnabled) {\n              localDatastore._updateObjectIfPinned(parseObject).then(function () {});\n            }\n          }\n      }\n    }\n  }, {\n    key: \"_handleWebSocketClose\",\n    value: function () {\n      var _context3;\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.CLOSED;\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n      // Notify each subscription about the close\n      var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var subscription = _step2.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleWebSocketError\",\n    value: function (error /*: any*/) {\n      var _context4;\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n      var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var subscription = _step3.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleReconnect\",\n    value: function () {\n      var _context5,\n        _this5 = this;\n      // if closed or currently reconnecting we stop attempting to reconnect\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n      this.state = CLIENT_STATE.RECONNECTING;\n      var time = generateInterval(this.attempts);\n\n      // handle case when both close/error occur at frequent rates we ensure we do not reconnect unnecessarily.\n      // we're unable to distinguish different between close/error when we're unable to reconnect therefore\n      // we try to reconnect in both cases\n      // server side ws and browser WebSocket behave differently in when close/error get triggered\n\n      if (this.reconnectHandle) {\n        clearTimeout(this.reconnectHandle);\n      }\n      this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function () {\n        _this5.attempts++;\n        _this5.connectPromise = (0, _promiseUtils.resolvingPromise)();\n        _this5.open();\n      }).call(_context5, this), time);\n    }\n  }]);\n  return LiveQueryClient;\n}();\n_CoreManager.default.setWebSocketController(typeof WebSocket === 'function' || (typeof WebSocket === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(WebSocket)) === 'object' ? WebSocket : null);\nvar _default = LiveQueryClient;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}